
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kuznetsov Sergey
 */
public class FontEdit extends javax.swing.JFrame {
    
    private final int LANG_C = 0, LANG_AVR_ASM = 1;
    
    private void addCharSelector() {
        editorPanel.tiles = new CharTile[editorPanel.font.characters];
        charSelectorPane.setLayout(new BoxLayout(charSelectorPane, BoxLayout.PAGE_AXIS));
        for (int i = 0; i < editorPanel.font.characters; i++) {
            editorPanel.tiles[i] = new CharTile(editorPanel, i);
            editorPanel.tiles[i].setVisible(true);
            charSelectorPane.add(editorPanel.tiles[i]);
        }
    }

    /**
     * Creates new form FontEdit
     */
    public FontEdit() {
        initComponents();
        saveFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Raster Font (.RAF)", "raf"));
        openFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Raster Font (.RAF)", "raf"));
        exportAsImageFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("BMP", "bmp"));
        exportAsImageFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("PNG", "png"));
        exportAsImageFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("GIF", "gif"));
        addCharSelector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exportAsImageDialog = new javax.swing.JDialog();
        codesFromSpinner = new javax.swing.JSpinner();
        codesToSpinner = new javax.swing.JSpinner();
        codesFromLabel = new javax.swing.JLabel();
        codesToLabel = new javax.swing.JLabel();
        columnsSpinner = new javax.swing.JSpinner();
        columnsLabel = new javax.swing.JLabel();
        marginSpinner = new javax.swing.JSpinner();
        marginLabel = new javax.swing.JLabel();
        paddingSpinner = new javax.swing.JSpinner();
        paddingLabel = new javax.swing.JLabel();
        exportButton = new javax.swing.JButton();
        exportAsImageFileChooser = new javax.swing.JFileChooser();
        aboutDialog = new javax.swing.JDialog();
        aboutPanel = new About();
        newFileDialog = new javax.swing.JDialog();
        fontWidthSpinner = new javax.swing.JSpinner();
        fontWidthLabel = new javax.swing.JLabel();
        fontHeightSpinner = new javax.swing.JSpinner();
        fontHeightLabel = new javax.swing.JLabel();
        newButton = new javax.swing.JButton();
        saveFileChooser = new javax.swing.JFileChooser();
        openFileChooser = new javax.swing.JFileChooser();
        exportAsCodeDialog = new javax.swing.JDialog();
        exportAsCodeFromSpinner = new javax.swing.JSpinner();
        exportAsCodeToSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        scanLabel = new javax.swing.JLabel();
        horizontalScanRadioButton = new javax.swing.JRadioButton();
        verticalScanRadioButton = new javax.swing.JRadioButton();
        languageLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox<>();
        exportAsCodeButton = new javax.swing.JButton();
        scanButtonGroup = new javax.swing.ButtonGroup();
        byteOrderButtonGroup = new javax.swing.ButtonGroup();
        exportAsCodeFileChooser = new javax.swing.JFileChooser();
        editorPanel = new EditorPanel();
        charecterSetFrame = new javax.swing.JInternalFrame();
        editCharButton = new javax.swing.JButton();
        setAsBackgroundButton = new javax.swing.JButton();
        charsScrollPane = new javax.swing.JScrollPane();
        charSelectorPane = new javax.swing.JPanel();
        toolbarPanel = new javax.swing.JPanel();
        pencilToggleButton = new javax.swing.JToggleButton();
        rectToggleButton = new javax.swing.JToggleButton();
        invertButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        fileFirstSeparator = new javax.swing.JPopupMenu.Separator();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        fileSecondSeparator = new javax.swing.JPopupMenu.Separator();
        exportAsCodeMenuItem = new javax.swing.JMenuItem();
        exportAsImageMenuItem = new javax.swing.JMenuItem();
        fileThirdSeparator = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        displayBackgroundCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        backgroundToFrontCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        exportAsImageDialog.setTitle("Export as Image");
        exportAsImageDialog.setAlwaysOnTop(true);
        exportAsImageDialog.setIconImage(null);
        exportAsImageDialog.setModal(true);
        exportAsImageDialog.setResizable(false);
        exportAsImageDialog.setSize(new java.awt.Dimension(243, 174));

        codesFromSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 255, 1));

        codesToSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 255, 1));

        codesFromLabel.setText("Codes from:");

        codesToLabel.setText("to");

        columnsSpinner.setModel(new javax.swing.SpinnerNumberModel(16, 1, 255, 1));

        columnsLabel.setText("Columns:");

        marginSpinner.setModel(new javax.swing.SpinnerNumberModel(2, 0, 50, 1));

        marginLabel.setText("Margin:");

        paddingSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 0, 50, 1));

        paddingLabel.setText("Padding:");

        exportButton.setText("Export");
        exportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exportButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout exportAsImageDialogLayout = new javax.swing.GroupLayout(exportAsImageDialog.getContentPane());
        exportAsImageDialog.getContentPane().setLayout(exportAsImageDialogLayout);
        exportAsImageDialogLayout.setHorizontalGroup(
            exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportAsImageDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(exportAsImageDialogLayout.createSequentialGroup()
                        .addComponent(codesFromLabel)
                        .addGap(18, 18, 18)
                        .addGroup(exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(columnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codesFromSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(marginSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paddingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(columnsLabel)
                    .addComponent(marginLabel)
                    .addComponent(paddingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(codesToLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(codesToSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exportAsImageDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        exportAsImageDialogLayout.setVerticalGroup(
            exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportAsImageDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codesFromSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codesFromLabel)
                    .addComponent(codesToLabel)
                    .addComponent(codesToSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columnsLabel)
                    .addComponent(columnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marginSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marginLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(exportAsImageDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paddingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paddingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton)
                .addContainerGap())
        );

        exportAsImageFileChooser.setAcceptAllFileFilterUsed(false);
        exportAsImageFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        exportAsImageFileChooser.setCurrentDirectory(null);
        exportAsImageFileChooser.setDialogTitle("Export as Image");

        aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setMinimumSize(new java.awt.Dimension(550, 500));
        aboutDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        aboutDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        aboutDialog.setUndecorated(true);
        aboutDialog.setResizable(false);
        aboutDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                aboutDialogWindowOpened(evt);
            }
        });

        aboutPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aboutPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aboutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        newFileDialog.setTitle("New Font");
        newFileDialog.setModal(true);
        newFileDialog.setResizable(false);

        fontWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(8, 1, 64, 1));

        fontWidthLabel.setText("Width:");

        fontHeightSpinner.setModel(new javax.swing.SpinnerNumberModel(8, 1, 64, 1));

        fontHeightLabel.setText("Height:");

        newButton.setText("New");
        newButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout newFileDialogLayout = new javax.swing.GroupLayout(newFileDialog.getContentPane());
        newFileDialog.getContentPane().setLayout(newFileDialogLayout);
        newFileDialogLayout.setHorizontalGroup(
            newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newFileDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newButton)
                    .addGroup(newFileDialogLayout.createSequentialGroup()
                        .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontWidthLabel)
                            .addComponent(fontHeightLabel))
                        .addGap(18, 18, 18)
                        .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fontHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newFileDialogLayout.setVerticalGroup(
            newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newFileDialogLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontWidthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontWidthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontHeightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontHeightLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveFileChooser.setAcceptAllFileFilterUsed(false);
        saveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        openFileChooser.setAcceptAllFileFilterUsed(false);

        exportAsCodeDialog.setTitle("Export as Code");
        exportAsCodeDialog.setAlwaysOnTop(true);
        exportAsCodeDialog.setResizable(false);

        jLabel1.setText("Codes from:");

        jLabel2.setText("to");

        scanLabel.setText("Scan:");

        scanButtonGroup.add(horizontalScanRadioButton);
        horizontalScanRadioButton.setSelected(true);
        horizontalScanRadioButton.setText("Horizontal");

        scanButtonGroup.add(verticalScanRadioButton);
        verticalScanRadioButton.setText("Vertical");

        languageLabel.setText("Language:");

        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C" }));

        exportAsCodeButton.setText("Export");
        exportAsCodeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportAsCodeButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout exportAsCodeDialogLayout = new javax.swing.GroupLayout(exportAsCodeDialog.getContentPane());
        exportAsCodeDialog.getContentPane().setLayout(exportAsCodeDialogLayout);
        exportAsCodeDialogLayout.setHorizontalGroup(
            exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportAsCodeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(exportAsCodeDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportAsCodeFromSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exportAsCodeToSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exportAsCodeDialogLayout.createSequentialGroup()
                            .addComponent(languageLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(languageComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, exportAsCodeDialogLayout.createSequentialGroup()
                            .addComponent(scanLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(horizontalScanRadioButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(verticalScanRadioButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exportAsCodeDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportAsCodeButton)
                .addContainerGap())
        );
        exportAsCodeDialogLayout.setVerticalGroup(
            exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportAsCodeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportAsCodeFromSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(exportAsCodeToSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanLabel)
                    .addComponent(horizontalScanRadioButton)
                    .addComponent(verticalScanRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(exportAsCodeDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(languageLabel)
                    .addComponent(languageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportAsCodeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Font Editor");

        editorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        editorPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                editorPanelMouseMoved(evt);
            }
        });
        editorPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                editorPanelMouseWheelMoved(evt);
            }
        });
        editorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                editorPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);
        editorPanel.setLayout(editorPanelLayout);
        editorPanelLayout.setHorizontalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );
        editorPanelLayout.setVerticalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        charecterSetFrame.setTitle("Charecter Set");
        try {
            charecterSetFrame.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        charecterSetFrame.setVisible(true);

        editCharButton.setText("Edit");
        editCharButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editCharButtonMouseClicked(evt);
            }
        });

        setAsBackgroundButton.setText("Set as Background");
        setAsBackgroundButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setAsBackgroundButtonMouseClicked(evt);
            }
        });

        charsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        charsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        charsScrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout charSelectorPaneLayout = new javax.swing.GroupLayout(charSelectorPane);
        charSelectorPane.setLayout(charSelectorPaneLayout);
        charSelectorPaneLayout.setHorizontalGroup(
            charSelectorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 179, Short.MAX_VALUE)
        );
        charSelectorPaneLayout.setVerticalGroup(
            charSelectorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 351, Short.MAX_VALUE)
        );

        charsScrollPane.setViewportView(charSelectorPane);

        javax.swing.GroupLayout charecterSetFrameLayout = new javax.swing.GroupLayout(charecterSetFrame.getContentPane());
        charecterSetFrame.getContentPane().setLayout(charecterSetFrameLayout);
        charecterSetFrameLayout.setHorizontalGroup(
            charecterSetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(charecterSetFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editCharButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(setAsBackgroundButton)
                .addContainerGap())
            .addComponent(charsScrollPane)
        );
        charecterSetFrameLayout.setVerticalGroup(
            charecterSetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, charecterSetFrameLayout.createSequentialGroup()
                .addComponent(charsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(charecterSetFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setAsBackgroundButton)
                    .addComponent(editCharButton))
                .addContainerGap())
        );

        toolbarPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        pencilToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pencil.gif"))); // NOI18N
        pencilToggleButton.setToolTipText("Pencil");
        pencilToggleButton.setPreferredSize(new java.awt.Dimension(45, 45));
        pencilToggleButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pencilToggleButtonStateChanged(evt);
            }
        });

        rectToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/rect.gif"))); // NOI18N
        rectToggleButton.setToolTipText("Rectangle");
        rectToggleButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rectToggleButtonStateChanged(evt);
            }
        });

        javax.swing.GroupLayout toolbarPanelLayout = new javax.swing.GroupLayout(toolbarPanel);
        toolbarPanel.setLayout(toolbarPanelLayout);
        toolbarPanelLayout.setHorizontalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolbarPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pencilToggleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectToggleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        toolbarPanelLayout.setVerticalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolbarPanelLayout.createSequentialGroup()
                .addComponent(pencilToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rectToggleButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        invertButton.setText("Invert");
        invertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invertButtonMouseClicked(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButtonMouseClicked(evt);
            }
        });

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newMenuItemMouseReleased(evt);
            }
        });
        fileMenu.add(newMenuItem);
        fileMenu.add(fileFirstSeparator);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                openMenuItemMouseReleased(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveMenuItemMouseReleased(evt);
            }
        });
        fileMenu.add(saveMenuItem);
        fileMenu.add(fileSecondSeparator);

        exportAsCodeMenuItem.setText("Export as Code");
        exportAsCodeMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exportAsCodeMenuItemMouseReleased(evt);
            }
        });
        fileMenu.add(exportAsCodeMenuItem);

        exportAsImageMenuItem.setText("Export as Image");
        exportAsImageMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exportAsImageMenuItemMouseReleased(evt);
            }
        });
        fileMenu.add(exportAsImageMenuItem);
        fileMenu.add(fileThirdSeparator);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        displayBackgroundCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        displayBackgroundCheckBoxMenuItem.setSelected(true);
        displayBackgroundCheckBoxMenuItem.setText("Display Backgraund Character");
        displayBackgroundCheckBoxMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                displayBackgroundCheckBoxMenuItemStateChanged(evt);
            }
        });
        viewMenu.add(displayBackgroundCheckBoxMenuItem);

        backgroundToFrontCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        backgroundToFrontCheckBoxMenuItem.setText("Backgound to Front");
        backgroundToFrontCheckBoxMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                backgroundToFrontCheckBoxMenuItemStateChanged(evt);
            }
        });
        viewMenu.add(backgroundToFrontCheckBoxMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aboutMenuItemMouseReleased(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(charecterSetFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(charecterSetFrame)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invertButton)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backgroundToFrontCheckBoxMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_backgroundToFrontCheckBoxMenuItemStateChanged
        editorPanel.backgroundToFront = !editorPanel.backgroundToFront;
        editorPanel.repaint();
    }//GEN-LAST:event_backgroundToFrontCheckBoxMenuItemStateChanged

    private void displayBackgroundCheckBoxMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_displayBackgroundCheckBoxMenuItemStateChanged
        editorPanel.drawBackground = !editorPanel.drawBackground;
        backgroundToFrontCheckBoxMenuItem.setEnabled(editorPanel.drawBackground);
        setAsBackgroundButton.setEnabled(editorPanel.drawBackground);
        editorPanel.repaint();
    }//GEN-LAST:event_displayBackgroundCheckBoxMenuItemStateChanged

    private void editorPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_editorPanelMouseWheelMoved
        editorPanel.scale(evt.getPreciseWheelRotation());
    }//GEN-LAST:event_editorPanelMouseWheelMoved

    private void pencilToggleButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pencilToggleButtonStateChanged
        boolean selected = pencilToggleButton.isSelected();
        editorPanel.tool = selected ? EditorPanel.PENCIL : 0;
        rectToggleButton.setSelected(false);
        editorPanel.repaint();
    }//GEN-LAST:event_pencilToggleButtonStateChanged

    private void rectToggleButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rectToggleButtonStateChanged
        boolean selected = rectToggleButton.isSelected();
        editorPanel.tool = selected ? EditorPanel.RECT : 0;
        pencilToggleButton.setSelected(false);
        editorPanel.repaint();
    }//GEN-LAST:event_rectToggleButtonStateChanged

    private void editorPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorPanelMousePressed
        editorPanel.mouse(evt.getX(), evt.getY(), evt.getButton());
    }//GEN-LAST:event_editorPanelMousePressed

    private void editCharButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editCharButtonMouseClicked
        int ps = editorPanel.symbolCode;
        editorPanel.symbolCode = editorPanel.selectedSymbol;
        editorPanel.tiles[ps].repaint();
        editorPanel.tiles[editorPanel.selectedSymbol].repaint();
        editorPanel.repaint();
    }//GEN-LAST:event_editCharButtonMouseClicked

    private void setAsBackgroundButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setAsBackgroundButtonMouseClicked
        int ps = editorPanel.backgroundSymbolCode;
        editorPanel.backgroundSymbolCode = editorPanel.selectedSymbol;
        editorPanel.tiles[ps].repaint();
        editorPanel.tiles[editorPanel.selectedSymbol].repaint();
        editorPanel.repaint();
    }//GEN-LAST:event_setAsBackgroundButtonMouseClicked

    private void aboutPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutPanelMouseReleased
        aboutDialog.hide();
    }//GEN-LAST:event_aboutPanelMouseReleased

    private void aboutDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_aboutDialogWindowOpened
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        aboutDialog.setLocation(dim.width / 2 - 550 / 2, dim.height / 2 - 500 / 2);
    }//GEN-LAST:event_aboutDialogWindowOpened

    private void exportButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportButtonMouseReleased
        if ((Integer) codesFromSpinner.getValue() >= 0 && (Integer) codesFromSpinner.getValue() < editorPanel.font.characters
                && (Integer) codesToSpinner.getValue() >= 0 && (Integer) codesToSpinner.getValue() < editorPanel.font.characters
                && (Integer) codesFromSpinner.getValue() <= (Integer) codesToSpinner.getValue()
                && (Integer) columnsSpinner.getValue() > 0
                && (Integer) marginSpinner.getValue() >= 0
                && (Integer) paddingSpinner.getValue() >= 0) {
        } else {
            JOptionPane.showMessageDialog(exportAsImageDialog, "Some parameters are incorrect");
            return;
        }
        if (exportAsImageFileChooser.showDialog(exportAsImageDialog, "Export") == JFileChooser.APPROVE_OPTION) {
            exportAsImageDialog.hide();
            File file = exportAsImageFileChooser.getSelectedFile();
            if (file == null) return;
            String ext = "." + exportAsImageFileChooser.getFileFilter().getDescription().toLowerCase();
            file = new File(file.getParentFile(), file.getName() + (file.getName().endsWith(ext) ? "" : ext));
            BufferedImage img = editorPanel.font.exportAsImage(
                    (Integer) codesFromSpinner.getValue(),
                    (Integer) codesToSpinner.getValue(),
                    (Integer) columnsSpinner.getValue(),
                    (Integer) marginSpinner.getValue(),
                    (Integer) paddingSpinner.getValue());
            try {
                ImageIO.write(img, exportAsImageFileChooser.getFileFilter().getDescription(), file);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(exportAsImageDialog, "Error occured during export procedure");
            }
        }
    }//GEN-LAST:event_exportButtonMouseReleased

    private void aboutMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMenuItemMouseReleased
        aboutDialog.show();
    }//GEN-LAST:event_aboutMenuItemMouseReleased

    private void openMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openMenuItemMouseReleased
        if (openFileChooser.showDialog(this, "Open") == JFileChooser.APPROVE_OPTION) {
            ObjectInputStream objectInputStream;
            try {
                objectInputStream = new ObjectInputStream(new FileInputStream(openFileChooser.getSelectedFile()));
                editorPanel.font = (Font) objectInputStream.readObject();
                objectInputStream.close();
                editorPanel.repaint();
                for (int i = 0; i < editorPanel.font.characters; i++)
                    editorPanel.tiles[i].repaint();
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File not found");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "IO Error");
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File is corrupt");
            }
        }
    }//GEN-LAST:event_openMenuItemMouseReleased

    private void saveMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMenuItemMouseReleased
        if (saveFileChooser.showDialog(this, "Save") == JFileChooser.APPROVE_OPTION) {
            File file = saveFileChooser.getSelectedFile();
            if (file == null) return;
            try {
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(file.getAbsolutePath() + (file.getName().endsWith(".raf") ? "" : ".raf")));
                objectOutputStream.writeObject(editorPanel.font);
                objectOutputStream.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error occured while saving");
            }
        }
    }//GEN-LAST:event_saveMenuItemMouseReleased

    private void newMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMenuItemMouseReleased
        newFileDialog.pack();
        newFileDialog.show();
    }//GEN-LAST:event_newMenuItemMouseReleased

    private void newButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newButtonMouseReleased
        editorPanel.font = new Font(256, (Integer) fontWidthSpinner.getValue(), (Integer) fontHeightSpinner.getValue());
        newFileDialog.hide();
        editorPanel.repaint();
        for (int i = 0; i < editorPanel.font.characters; i++)
            editorPanel.tiles[i].repaint();
    }//GEN-LAST:event_newButtonMouseReleased

    private void editorPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorPanelMouseMoved
        editorPanel.mouseX = evt.getX();
        editorPanel.mouseY = evt.getY();
        editorPanel.repaint();
    }//GEN-LAST:event_editorPanelMouseMoved

    private void invertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invertButtonMouseClicked
        editorPanel.font.invertChar(editorPanel.symbolCode);
        editorPanel.repaint();
    }//GEN-LAST:event_invertButtonMouseClicked

    private void clearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseClicked
        int dialogResult = JOptionPane.showConfirmDialog(this,
                "Would You Like to Clear " + editorPanel.symbolCode + " (0x" + Integer.toHexString(editorPanel.symbolCode).toUpperCase() + ")",
                "Confirm Action", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.OK_OPTION) {
            editorPanel.font.clearChar(editorPanel.symbolCode);
            editorPanel.repaint();
        }
    }//GEN-LAST:event_clearButtonMouseClicked

    private void exportAsCodeMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportAsCodeMenuItemMouseReleased
        /* String code = editorPanel.font.exportAsCode(5, 6, Font.HORIZONTAL, Font.LSB);
        System.out.println(code); */
        exportAsCodeDialog.pack();
        exportAsCodeDialog.show();
    }//GEN-LAST:event_exportAsCodeMenuItemMouseReleased

    private void exportAsImageMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportAsImageMenuItemMouseReleased
        exportAsImageDialog.pack();
        exportAsImageDialog.show();
    }//GEN-LAST:event_exportAsImageMenuItemMouseReleased

    private void exportAsCodeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportAsCodeButtonMouseClicked
        /* String code = editorPanel.font.exportAsCode((int) exportAsCodeFromSpinner.getValue(), (int) exportAsCodeToSpinner.getValue(), verticalScanRadioButton.isSelected());
        System.out.println("Code: " + code); */
        exportAsCodeFileChooser.setAcceptAllFileFilterUsed(false);
        exportAsCodeFileChooser.resetChoosableFileFilters();
        FileNameExtensionFilter filter = null;
        switch (languageComboBox.getSelectedIndex()) {
            case LANG_C: filter = new FileNameExtensionFilter("C", ".c"); break;
            case LANG_AVR_ASM: filter = new FileNameExtensionFilter("ASM", ".asm"); break;
            default: return;
        }
        exportAsCodeFileChooser.addChoosableFileFilter(filter);
        if ((Integer) exportAsCodeFromSpinner.getValue() >= 0 && (Integer) exportAsCodeFromSpinner.getValue() < editorPanel.font.characters
                && (Integer) exportAsCodeToSpinner.getValue() >= 0 && (Integer) exportAsCodeToSpinner.getValue() < editorPanel.font.characters
                && (Integer) exportAsCodeFromSpinner.getValue() <= (Integer) exportAsCodeToSpinner.getValue()) {
        } else {
            JOptionPane.showMessageDialog(exportAsCodeDialog, "Some parameters are incorrect");
            return;
        }
        if (exportAsCodeFileChooser.showDialog(exportAsCodeDialog, "Export") == JFileChooser.APPROVE_OPTION) {
            exportAsCodeDialog.hide();
            File file = exportAsCodeFileChooser.getSelectedFile();
            if (file == null) return;
            String ext = "." + exportAsCodeFileChooser.getFileFilter().getDescription().toLowerCase();
            System.out.println("EXT: " + ext);
            file = new File(file.getParentFile(), file.getName() + (file.getName().endsWith(ext) ? "" : ext));
            String code = editorPanel.font.exportAsCode((int) exportAsCodeFromSpinner.getValue(), (int) exportAsCodeToSpinner.getValue(), verticalScanRadioButton.isSelected());
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                writer.write(code);
                writer.close();
            } catch(IOException ex) {
                JOptionPane.showMessageDialog(exportAsCodeDialog, "Error occured during export procedure");
            }
        }
    }//GEN-LAST:event_exportAsCodeButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("CDE/Motif".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FontEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FontEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FontEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FontEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FontEdit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JMenuItem aboutMenuItem;
    private About aboutPanel;
    private javax.swing.JCheckBoxMenuItem backgroundToFrontCheckBoxMenuItem;
    private javax.swing.ButtonGroup byteOrderButtonGroup;
    private javax.swing.JPanel charSelectorPane;
    private javax.swing.JInternalFrame charecterSetFrame;
    private javax.swing.JScrollPane charsScrollPane;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel codesFromLabel;
    private javax.swing.JSpinner codesFromSpinner;
    private javax.swing.JLabel codesToLabel;
    private javax.swing.JSpinner codesToSpinner;
    private javax.swing.JLabel columnsLabel;
    private javax.swing.JSpinner columnsSpinner;
    private javax.swing.JCheckBoxMenuItem displayBackgroundCheckBoxMenuItem;
    private javax.swing.JButton editCharButton;
    private EditorPanel editorPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton exportAsCodeButton;
    private javax.swing.JDialog exportAsCodeDialog;
    private javax.swing.JFileChooser exportAsCodeFileChooser;
    private javax.swing.JSpinner exportAsCodeFromSpinner;
    private javax.swing.JMenuItem exportAsCodeMenuItem;
    private javax.swing.JSpinner exportAsCodeToSpinner;
    private javax.swing.JDialog exportAsImageDialog;
    private javax.swing.JFileChooser exportAsImageFileChooser;
    private javax.swing.JMenuItem exportAsImageMenuItem;
    private javax.swing.JButton exportButton;
    private javax.swing.JPopupMenu.Separator fileFirstSeparator;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileSecondSeparator;
    private javax.swing.JPopupMenu.Separator fileThirdSeparator;
    private javax.swing.JLabel fontHeightLabel;
    private javax.swing.JSpinner fontHeightSpinner;
    private javax.swing.JLabel fontWidthLabel;
    private javax.swing.JSpinner fontWidthSpinner;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JRadioButton horizontalScanRadioButton;
    private javax.swing.JButton invertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> languageComboBox;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JLabel marginLabel;
    private javax.swing.JSpinner marginSpinner;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newButton;
    private javax.swing.JDialog newFileDialog;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel paddingLabel;
    private javax.swing.JSpinner paddingSpinner;
    private javax.swing.JToggleButton pencilToggleButton;
    private javax.swing.JToggleButton rectToggleButton;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.ButtonGroup scanButtonGroup;
    private javax.swing.JLabel scanLabel;
    private javax.swing.JButton setAsBackgroundButton;
    private javax.swing.JPanel toolbarPanel;
    private javax.swing.JRadioButton verticalScanRadioButton;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
